name: Build Release

on:
  push:
    tags: ['v*']
  workflow_dispatch:  # Allow manual trigger for testing

env:
  BUILD_TYPE: Release

jobs:
  build:
    name: Build ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linux x64
            os: ubuntu-latest
            arch: x64
            artifact_name: birdchat-linux-x64
            
          - name: Windows x64
            os: windows-latest
            arch: x64
            artifact_name: birdchat-windows-x64
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y \
            libgtk2.0-dev \
            libglib2.0-dev \
            libssl-dev \
            libcanberra-dev \
            libdbus-glib-1-dev \
            meson \
            ninja-build \
            gettext \
            intltool
            
      - name: Setup MSYS2 (Windows)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          install: >-
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-gtk2
            mingw-w64-x86_64-glib2
            mingw-w64-x86_64-openssl
            mingw-w64-x86_64-meson
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-pkg-config
            mingw-w64-x86_64-gettext
            mingw-w64-x86_64-dbus-glib
            
      - name: Configure build (Linux)
        if: runner.os == 'Linux'
        run: |
          meson setup builddir \
            --buildtype=release \
            --prefix=/usr/local \
            -Dtls=enabled \
            -Ddbus=enabled
            
      - name: Configure build (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          meson setup builddir \
            --buildtype=release \
            -Dtls=enabled \
            -Ddbus=disabled
            
      - name: Build (Linux)
        if: runner.os == 'Linux'
        run: |
          meson compile -C builddir
          
      - name: Build (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          meson compile -C builddir
          
      - name: Run tests
        if: runner.os == 'Linux'
        run: |
          meson test -C builddir --verbose
          
      - name: Install to staging directory (Linux)
        if: runner.os == 'Linux'
        run: |
          DESTDIR=$PWD/staging meson install -C builddir
          
      - name: Package Linux build
        if: runner.os == 'Linux'
        run: |
          cd staging
          tar -czf ../birdchat-linux-x64.tar.gz usr/
          
      - name: Package Windows build
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          mkdir -p package/bin
          mkdir -p package/lib
          mkdir -p package/share
          
          # Copy binaries
          cp builddir/src/fe-gtk/birdchat.exe package/bin/
          cp builddir/src/fe-text/birdchat-text.exe package/bin/
          
          # Copy GTK2 and dependencies
          ldd package/bin/birdchat.exe | grep -o '/mingw64/bin/[^[:space:]]*' | while read dll; do
            cp "$dll" package/bin/ 2>/dev/null || true
          done
          
          # Copy data files
          cp -r data/icons package/share/ 2>/dev/null || true
          cp -r po package/share/locale 2>/dev/null || true
          
          # Create archive
          cd package
          zip -r ../birdchat-windows-x64.zip *
          
      - name: Upload Linux artifact
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: birdchat-linux-x64.tar.gz
          retention-days: 30
          
      - name: Upload Windows artifact  
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: birdchat-windows-x64.zip
          retention-days: 30

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Extract version from tag
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        
      - name: Generate release notes
        id: release_notes
        run: |
          echo "## BirdChat ${{ steps.version.outputs.version }}" > release_notes.md
          echo "" >> release_notes.md
          echo "### Changes" >> release_notes.md
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD~1)..HEAD >> release_notes.md
          echo "" >> release_notes.md
          echo "### Downloads" >> release_notes.md
          echo "- **Linux**: Extract \`birdchat-linux-x64.tar.gz\` and run \`usr/local/bin/birdchat\`" >> release_notes.md
          echo "- **Windows**: Extract \`birdchat-windows-x64.zip\` and run \`bin/birdchat.exe\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Installation" >> release_notes.md
          echo "See [README.md](README.md) for detailed installation instructions." >> release_notes.md
          
      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: BirdChat ${{ steps.version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
          
      - name: Upload Linux Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/birdchat-linux-x64/birdchat-linux-x64.tar.gz
          asset_name: birdchat-linux-x64.tar.gz
          asset_content_type: application/gzip
          
      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/birdchat-windows-x64/birdchat-windows-x64.zip
          asset_name: birdchat-windows-x64.zip
          asset_content_type: application/zip

  # Optional: Build development snapshots on main branch
  snapshot:
    name: Build Development Snapshot
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y libgtk2.0-dev meson ninja-build
          
      - name: Configure and build
        run: |
          meson setup builddir --buildtype=debug
          meson compile -C builddir
          
      - name: Run tests
        run: |
          meson test -C builddir --verbose